name: Auto Build Docker Images

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/Dockerfile'

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover_and_build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-projects.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find valid Docker projects
        id: find-projects
        run: |
          # Поиск папок с Dockerfile, исключая пустые имена
          mapfile -t DIRS < <(find . -mindepth 2 -type f -name Dockerfile -exec dirname {} \; | sed 's|^\./||' | grep -v '^$')
          
          # Проверка наличия проектов
          if [ ${#DIRS[@]} -eq 0 ]; then
            echo "::error::No Docker projects found!"
            exit 1
          fi
          
          # Массив JSON объектов
          JSON_ENTRIES=()
          for dir in "${DIRS[@]}"; do
            # Чистим путь от посторонних символов
            CLEAN_PATH=$(echo "$dir" | sed 's|[^a-zA-Z0-9-_.]|_|g')
            
            # Замена "/" на "-" для создания имени образа
            IMAGE_NAME=$(echo "$CLEAN_PATH" | tr '/' '-')
            
            # Проверка имени образа на непустоту
            if [[ -z "$IMAGE_NAME" || "$IMAGE_NAME" =~ ^[-]+$ ]]; then
              echo "::warning::Project path '$dir' results in an invalid or empty image name."
              continue
            fi
            
            # Сохранение в массив JSON
            JSON_ENTRIES+=("{\"project_path\":\"$dir\", \"image_name\": \"$IMAGE_NAME\"}")
          done
          
          # Получение итогового JSON в один сжатый формат
          MATRIX_JSON=$(printf '%s\n' "${JSON_ENTRIES[@]}" | jq -sc '.')
          
          # Запись матрицы в GITHUB_OUTPUT
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Valid projects found:"
          echo "$MATRIX_JSON" | jq .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.project_path }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}:${{ github.sha }}